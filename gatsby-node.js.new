const { documentToHtmlString } = require("@contentful/rich-text-html-renderer")

exports.createSchemaCustomization = async ({ actions }) => {
  actions.createFieldExtension({
    name: "blocktype",
    extend(options) {
      return {
        resolve(source) {
          if (source.internal.type.startsWith("Contentful")) {
            return source.internal.type.replace("Contentful", "")
          }
          return source.internal.type.replace("Wp", "")
        },
      }
    },
  });

  actions.createFieldExtension({
    name: "imageUrl",
    extend(options) {
      const schemaRE = /^\/\//
      const addURLSchema = (str) => {
        if (schemaRE.test(str)) return `https:${str}`
        return str
      }
      return {
        resolve(source) {
          return addURLSchema(source.file.url)
        },
      }
    },
  })

  actions.createFieldExtension({
    name: "navItemType",
    args: {
      name: {
        type: "String!",
        defaultValue: "Link",
      },
    },
    extend(options) {
      return {
        resolve() {
          switch (options.name) {
            case "Group":
              return "Group"
            default:
              return "Link"
          }
        },
      }
    },
  })

  actions.createFieldExtension({
    name: "richText",
    extend(options) {
      return {
        resolve(source, args, context, info) {
          const body = source.body
          const doc = JSON.parse(body.raw)
          const html = documentToHtmlString(doc)
          return html
        },
      }
    },
  })

  // abstract interfaces
  actions.createTypes(/* GraphQL */ `
    interface HomepageBlock implements Node {
      id: ID!
      blocktype: String
    }

    interface BeatsBlock implements Node {
      id: ID!
      blocktype: String
    }


    interface HomepageLink implements Node {
      id: ID!
      href: String
      text: String
    }

    interface BeatsLink implements Node {
      id: ID!
      href: String
      text: String
    }


    interface HeaderNavItem implements Node {
      id: ID!
      navItemType: String
    }

    interface NavItem implements Node & HeaderNavItem {
      id: ID!
      navItemType: String
      href: String
      text: String
      icon: HomepageImage
      description: String
    }

    interface NavItemGroup implements Node & HeaderNavItem {
      id: ID!
      navItemType: String
      name: String
      navItems: [NavItem]
    }

    interface HomepageImage implements Node {
      id: ID!
      alt: String
      gatsbyImageData: GatsbyImageData
      url: String
    }

    interface BeatsImage implements Node {
      id: ID!
      alt: String
      gatsbyImageData: GatsbyImageData
      url: String
    }

    interface HomepageHero implements Node & HomepageBlock {
      id: ID!
      blocktype: String
      heading: String!
      kicker: String
      subhead: String
      image: HomepageImage
      text: String
      links: [HomepageLink]
    }
    interface BlogFeature implements Node & HomepageBlock {
      id: ID!
      blocktype: String
      title: String
      excerpt: String
      uri: String
      date: Date
    }
  


    
    interface BeatsHero implements Node & BeatsBlock {
      id: ID!
      blocktype: String
      heading: String!
      kicker: String
      subhead: String
      image: BeatsImage
      text: String
      links: [BeatsLink]
    }

    interface HomepageFeature implements Node & HomepageBlock {
      id: ID!
      blocktype: String
      heading: String
      kicker: String
      text: String
      image: HomepageImage
      links: [HomepageLink]
    }

  
    interface BeatsFeature implements Node & BeatsBlock {
      id: ID!
      blocktype: String
      heading: String
      kicker: String
      text: String
      image: BeatsImage
      links: [BeatsLink]
    }
  `);

  // Create comprehensive WordPress mock types when BYPASS_WORDPRESS is true
  if (process.env.BYPASS_WORDPRESS === "true") {
    console.log("üìù Creating WordPress mock types for BYPASS_WORDPRESS mode");
    actions.createTypes(/* GraphQL */ `
      # Core WordPress Types
      type WpMediaItem implements Node @dontInfer {
        id: ID!
        altText: String
        sourceUrl: String
        localFile: File @link
        gatsbyImage: JSON
      }
      
      type WpPost implements Node @dontInfer {
        id: ID!
        title: String
        excerpt: String
        content: String
        date: Date @dateformat
        formattedDate: String
        slug: String
        uri: String
        featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdge
        categories: WpPostToCategoryConnection
        tags: WpPostToTagConnection
        author: WpNodeWithAuthorToUserConnectionEdge
        databaseId: Int
      }
      
      type WpPage implements Node @dontInfer {
        id: ID!
        title: String
        content: String
        slug: String
        uri: String
        date: Date @dateformat
        featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdge
        databaseId: Int
      }

      # Music Content Types
      type WpBeat implements Node @dontInfer {
        id: ID!
        title: String
        slug: String
        content: String
        date: Date @dateformat
        featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdge
        acfBeats: WpBeatAcfBeats
        databaseId: Int
      }

      type WpBeatAcfBeats {
        audioFile: WpMediaItem
        price: Float
        genre: String
        bpm: Int
        audioUrl: String
        soundcloudUrl: String
        purchaseUrl: String
        keySignature: String
      }

      type WpMix implements Node @dontInfer {
        id: ID!
        title: String
        slug: String
        content: String
        date: Date @dateformat
        featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdge
        acfMixes: WpMixAcfMixes
        databaseId: Int
      }

      type WpMixAcfMixes {
        audioFile: WpMediaItem
        genre: String
        tracklist: String
        audioUrl: String
        soundcloudUrl: String
        duration: String
      }

      type WpTutorial implements Node @dontInfer {
        id: ID!
        title: String
        slug: String
        content: String
        date: Date @dateformat
        featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdge
        acfTutorials: WpTutorialAcfTutorials
        databaseId: Int
      }

      type WpTutorialAcfTutorials {
        videoUrl: String
        difficulty: String
        duration: String
        topic: String
        software: String
        tags: [String]
      }
      
      type WpVideo implements Node @dontInfer {
        id: ID!
        title: String
        excerpt: String
        content: String
        date: Date @dateformat
        formattedDate: String
        slug: String
        uri: String
        featuredImage: WpNodeWithFeaturedImageToMediaItemConnectionEdge
        videoCategories: WpVideoToVideoCategoryConnection
        databaseId: Int
      }
      
      type WpNodeWithFeaturedImageToMediaItemConnectionEdge {
        node: WpMediaItem
      }
      
      type WpPostToCategoryConnection {
        nodes: [WpCategory]
      }
      
      type WpVideoToVideoCategoryConnection {
        nodes: [WpCategory]
      }
      
      type WpPostToTagConnection {
        nodes: [WpTag]
      }
      
      type WpNodeWithAuthorToUserConnectionEdge {
        node: WpUser
      }
      
      type WpUser implements Node @dontInfer {
        id: ID!
        name: String
        slug: String
      }
      
      type WpCategory implements Node @dontInfer {
        id: ID!
        name: String
        slug: String
        count: Int
      }
      
      type WpTag implements Node @dontInfer {
        id: ID!
        name: String
        slug: String
        count: Int
      }
      
      # Input types needed for filtering in queries
      input WpPostFilterInput {
        slug: StringQueryOperatorInput
        date: DateQueryOperatorInput
        categories: WpPostToCategoryConnectionFilterInput
        title: StringQueryOperatorInput
        content: StringQueryOperatorInput
        excerpt: StringQueryOperatorInput
      }
      
      input WpCategoryFilterInput {
        slug: StringQueryOperatorInput
        name: StringQueryOperatorInput
      }
      
      input WpTagFilterInput {
        slug: StringQueryOperatorInput
        name: StringQueryOperatorInput
      }
      
      input WpPostToCategoryConnectionFilterInput {
        nodes: WpCategoryFilterListInput
      }
      
      input WpCategoryFilterListInput {
        elemMatch: WpCategoryFilterInput
      }
      
      input StringQueryOperatorInput {
        eq: String
        ne: String
        in: [String]
        nin: [String]
        regex: String
        glob: String
      }
      
      input DateQueryOperatorInput {
        eq: Date
        ne: Date
        gt: Date
        gte: Date
        lt: Date
        lte: Date
        in: [Date]
        nin: [Date]
      }
      
      # Add interfaces that Gatsby needs for querying
      interface WpNode {
        id: ID!
      }
      
      interface WpContentNode {
        id: ID!
        date: Date @dateformat
      }
      
      interface WpTermNode {
        id: ID!
        name: String
        slug: String
      }
      
      # Add connections for collection queries
      type WpPostConnection {
        nodes: [WpPost]
      }
      
      type WpCategoryConnection {
        nodes: [WpCategory]
      }
      
      type WpTagConnection {
        nodes: [WpTag]
      }
      
      type WpTutorialConnection {
        nodes: [WpTutorial]
      }
      
      type WpVideoConnection {
        nodes: [WpVideo]
      }
      
      type WpBeatConnection {
        nodes: [WpBeat]
      }
      
      type WpMixConnection {
        nodes: [WpMix]
      }
    `);
    
    // Add type extensions for query root fields
    actions.createTypes(/* GraphQL */ `
      extend type Query {
        wpPage(id: String, slug: String): WpPage
        wpPost(id: String, slug: String): WpPost
        wpBeat(id: String, slug: String): WpBeat
        wpMix(id: String, slug: String): WpMix
        wpVideo(id: String, slug: String): WpVideo
        wpTutorial(id: String, slug: String): WpTutorial
        allWpPost(
          filter: WpPostFilterInput
          sort: { fields: [Date], order: DESC }
          limit: Int
        ): WpPostConnection
        allWpCategory(filter: WpCategoryFilterInput): WpCategoryConnection
        allWpTag(filter: WpTagFilterInput): WpTagConnection
        allWpTutorial: WpTutorialConnection
        allWpVideo: WpVideoConnection
        allWpBeat: WpBeatConnection
        allWpMix: WpMixConnection
      }
    `);
  }
};

// Add resolvers for fields that can't be handled by gatsby-transformer-sharp
exports.createResolvers = ({ createResolvers }) => {
  const resolvers = {
    File: {
      // Make the publicURL field available for all File nodes
      publicURL: {
        type: `String!`,
        resolve: (source) => {
          // Return URL path relative to the website with fallback
          return source.relativePath ? `/${source.relativePath}` : null;
        },
      },
      // Add url as an alias of publicURL for consistency with contentful
      url: {
        type: `String!`,
        resolve: (source) => {
          // Return URL path relative to the website with fallback
          return source.relativePath ? `/${source.relativePath}` : null;
        },
      },
    },
    // Add WpMediaItem resolvers for backward compatibility
    WpMediaItem: {
      localFile: {
        type: 'File',
        resolve() {
          // In bypass mode, return a mock file object
          return {
            relativePath: 'static/images/demo-cover-1.jpg',
            childImageSharp: {
              gatsbyImageData: {}
            }
          };
        },
      },
      sourceUrl: {
        type: 'String',
        resolve() {
          return '/static/images/demo-cover-1.jpg';
        }
      },
      altText: {
        type: 'String',
        resolve() {
          return 'Demo image';
        }
      }
    },
    // Add WpPost resolvers
    WpPost: {
      formattedDate: {
        type: 'String',
        resolve(source) {
          if (!source.date) return '';
          
          const dateObj = new Date(source.date);
          const months = [
            'January', 'February', 'March', 'April', 'May', 'June',
            'July', 'August', 'September', 'October', 'November', 'December'
          ];
          
          const month = months[dateObj.getMonth()];
          const day = dateObj.getDate();
          const year = dateObj.getFullYear();
          
          return `${month} ${day < 10 ? '0' + day : day}, ${year}`;
        }
      },
      featuredImage: {
        resolve() {
          // Return a mock featuredImage structure in bypass mode
          return {
            node: {
              sourceUrl: '/static/images/demo-cover-1.jpg',
              altText: 'Demo featured image',
              localFile: {
                childImageSharp: {
                  gatsbyImageData: {}
                }
              }
            }
          };
        }
      },
      categories: {
        resolve() {
          // Return mock categories in bypass mode
          return {
            nodes: [
              { id: 'cat-1', name: 'Music', slug: 'music' },
              { id: 'cat-2', name: 'Production', slug: 'production' }
            ]
          };
        }
      },
      tags: {
        resolve() {
          return {
            nodes: [
              { id: 'tag-1', name: 'Tutorial', slug: 'tutorial' },
              { id: 'tag-2', name: 'Tips', slug: 'tips' }
            ]
          };
        }
      },
      author: {
        resolve() {
          return {
            node: {
              id: 'author-1',
              name: 'Jeldon',
              slug: 'jeldon'
            }
          };
        }
      }
    },
    // Add WpVideo resolvers
    WpVideo: {
      formattedDate: {
        type: 'String',
        resolve(source) {
          if (!source.date) return '';
          
          const dateObj = new Date(source.date);
          const months = [
            'January', 'February', 'March', 'April', 'May', 'June',
            'July', 'August', 'September', 'October', 'November', 'December'
          ];
          
          const month = months[dateObj.getMonth()];
          const day = dateObj.getDate();
          const year = dateObj.getFullYear();
          
          return `${month} ${day < 10 ? '0' + day : day}, ${year}`;
        }
      },
      featuredImage: {
        resolve() {
          // Return a mock featuredImage structure in bypass mode
          return {
            node: {
              sourceUrl: '/static/images/demo-cover-1.jpg',
              altText: 'Demo video thumbnail',
              localFile: {
                childImageSharp: {
                  gatsbyImageData: {}
                }
              }
            }
          };
        }
      },
      videoCategories: {
        resolve() {
          // Return mock categories in bypass mode
          return {
            nodes: [
              { id: 'vcat-1', name: 'Tutorials', slug: 'tutorials' },
              { id: 'vcat-2', name: 'Behind the Scenes', slug: 'behind-the-scenes' }
            ]
          };
        }
      }
    },
    // Enhance WpBeat resolvers
    WpBeat: {
      featuredImage: {
        resolve() {
          // Return a mock featuredImage structure in bypass mode
          return {
            node: {
              sourceUrl: '/static/images/demo-cover-1.jpg',
              altText: 'Demo beat cover',
              localFile: {
                childImageSharp: {
                  gatsbyImageData: {}
                }
              }
            }
          };
        }
      },
      // Add mock acfBeats fields
      acfBeats: {
        resolve() {
          return {
            audioFile: {
              localFile: {
                publicURL: '/static/audio/demo-track-1.mp3',
                url: '/static/audio/demo-track-1.mp3'
              }
            },
            price: 29.99,
            genre: 'Hip-Hop',
            bpm: 95,
            audioUrl: '/static/audio/demo-track-1.mp3',
            soundcloudUrl: '#',
            keySignature: 'C Minor'
          };
        }
      }
    },
    // Enhance WpMix resolvers
    WpMix: {
      featuredImage: {
        resolve() {
          // Return a mock featuredImage structure in bypass mode
          return {
            node: {
              sourceUrl: '/static/images/demo-cover-2.jpg',
              altText: 'Demo mix cover',
              localFile: {
                childImageSharp: {
                  gatsbyImageData: {}
                }
              }
            }
          };
        }
      },
      // Add mock acfMixes fields
      acfMixes: {
        resolve() {
          return {
            audioFile: {
              localFile: {
                publicURL: '/static/audio/demo-track-2.mp3',
                url: '/static/audio/demo-track-2.mp3'
              }
            },
            genre: 'Hip-Hop',
            tracklist: '1. Track One\n2. Track Two\n3. Track Three',
            audioUrl: '/static/audio/demo-track-2.mp3',
            soundcloudUrl: '#',
            duration: '45:30'
          };
        }
      }
    }
  };
  createResolvers(resolvers);
};

exports.createPages = async ({ graphql, actions }) => {
  const { createPage, createSlice } = actions;

  // Skip WordPress queries if BYPASS_WORDPRESS is true
  if (process.env.BYPASS_WORDPRESS === "true") {
    console.log("WordPress data fetch bypassed by BYPASS_WORDPRESS environment variable");
    
    // Create slices
    createSlice({
      id: "header",
      component: require.resolve("./src/components/header.js"),
    });
    
    createSlice({
      id: "footer",
      component: require.resolve("./src/components/footer.js"),
    });
    
    return;
  }

  // Create WordPress pages
  let result;
  try {
    result = await graphql(`
      {
        allWpPage {
          nodes {
            id
            slug
            title
            content
          }
        }
        allWpPost {
          nodes {
            id
            slug
            title
          }
        }
        allWpBeat {
          nodes {
            id
            slug
            title
          }
        }
        allWpTutorial {
          nodes {
            id
            slug
            title
          }
        }
        allWpMix {
          nodes {
            id
            slug
            title
          }
        }
        allWpVideo {
          nodes {
            id
            slug
            title
          }
        }
      }
    `);

    if (result.errors) {
      console.error('GraphQL errors:', result.errors);
      console.warn('Continuing build despite GraphQL errors');
    }
  } catch (error) {
    console.error('Error fetching WordPress data:', error);
    console.warn('Continuing build despite fetch error');
    // Create empty result object to allow the build to continue
    result = { data: {} };
  }

  // Safely access data with fallbacks
  const pages = result.data?.allWpPage?.nodes || [];
  const posts = result.data?.allWpPost?.nodes || [];
  const beats = result.data?.allWpBeat?.nodes || [];
  const tutorials = result.data?.allWpTutorial?.nodes || [];
  const mixes = result.data?.allWpMix?.nodes || [];
  const videos = result.data?.allWpVideo?.nodes || [];

  // Debug logging
  console.log(`Creating ${pages.length} WordPress pages`);
  console.log(`Creating ${posts.length} blog posts`);
  console.log(`Creating ${beats.length} beats`);
  console.log(`Creating ${tutorials.length} tutorials`);
  console.log(`Creating ${mixes.length} mixes`);
  console.log(`Creating ${videos.length} videos`);

  // Check for WordPress connection
  if (posts.length === 0) {
    console.warn('‚ö†Ô∏è  No WordPress posts found. Check WordPress connection at:', process.env.WPGRAPHQL_URL);
  }

  // Create WordPress pages
  pages.forEach(page => {
    createPage({
      path: `/${page.slug}/`,
      component: require.resolve("./src/pages/{Page.slug}.js"),
      context: {
        id: page.id,
      },
    });
  });

  // Create Blog post pages with next/previous navigation
  posts.forEach((post, index) => {
    console.log(`Creating blog post page: /blog/${post.slug}/`);
    const previousPost = index === 0 ? null : posts[index - 1];
    const nextPost = index === posts.length - 1 ? null : posts[index + 1];
    
    createPage({
      path: `/blog/${post.slug}/`,
      component: require.resolve("./src/templates/blog-post.js"),
      context: {
        id: post.id,
        slug: post.slug,
        previousPost: previousPost ? {
          slug: previousPost.slug,
          title: previousPost.title
        } : null,
        nextPost: nextPost ? {
          slug: nextPost.slug,
          title: nextPost.title
        } : null,
      },
    });
  });

  // Create Beat pages
  beats.forEach(beat => {
    createPage({
      path: `/beats/${beat.slug}/`,
      component: require.resolve("./src/templates/beat.tsx"),
      context: {
        id: beat.id,
        slug: beat.slug,
      },
    });
  });

  // Create Tutorial pages
  tutorials.forEach(tutorial => {
    createPage({
      path: `/tutorials/${tutorial.slug}/`,
      component: require.resolve("./src/templates/tutorial.tsx"),
      context: {
        id: tutorial.id,
        slug: tutorial.slug,
      },
    });
  });

  // Create Mix pages
  mixes.forEach(mix => {
    createPage({
      path: `/mixes/${mix.slug}/`,
      component: require.resolve("./src/templates/mix.tsx"),
      context: {
        id: mix.id,
        slug: mix.slug,
      },
    });
  });

  // Create Video pages with next/previous navigation
  videos.forEach((video, index) => {
    console.log(`Creating video page: /videos/${video.slug}/`);
    const previousVideo = index === 0 ? null : videos[index - 1];
    const nextVideo = index === videos.length - 1 ? null : videos[index + 1];
    
    createPage({
      path: `/videos/${video.slug}/`,
      component: require.resolve("./src/templates/video.js"),
      context: {
        id: video.id,
        slug: video.slug,
        previousVideo: previousVideo ? {
          slug: previousVideo.slug,
          title: previousVideo.title
        } : null,
        nextVideo: nextVideo ? {
          slug: nextVideo.slug,
          title: nextVideo.title
        } : null,
      },
    });
  });

  // Create slices
  createSlice({
    id: "header",
    component: require.resolve("./src/components/header.js"),
  });
  
  createSlice({
    id: "footer",
    component: require.resolve("./src/components/footer.js"),
  });
};
